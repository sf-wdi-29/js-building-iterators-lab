/* This is the test file for mySome function
 *    PLEASE DO NOT EDIT THIS FILE
 * To run these tests do `mocha spec/test-mySome.js`
*/

var mocha = require('mocha');
var chai = require('chai');
var spies = require('chai-spies');
chai.use(spies);

var expect = chai.expect;
chai.config.includeStack = false; // turn off stack trace
chai.config.showDiff = true; // turn on reporter diff display

var mySome = require('../mySome');

describe('mySome', function() {
  // sample data
  beforeEach(function() {
    testArr = [true, false, true, false];
  });

  it("takes a function as the second argument and calls that function (callback)", function testCallback() {
    function spyOnMe() {}
    var spy = chai.spy(spyOnMe);
    testArr.mySome(spy);
    expect(spy).to.have.been.called();
  });

  it("has a return value that is equal to the last return value of the callback", function() {
    var results = testArr.mySome(function(){
      return 1000100;  // on every pass
    });
    console.log('       results: ', results);
    expect(results).to.equal(true);
  });


  it("returns a boolean, not an array", function() {
    var results = testArr.mySome(function() {
      return 'mercury';
    }, 'foo');
    console.log('       results: ', results);
    expect(results).to.not.be.an('array');
    expect(results).to.not.be.an("undefined");
  });

  it("returns true when the last item is true", function() {
    testArr.push(true);
    var result = testArr.mySome(function() {
      return 'mercury';
    }, 'foo');
    console.log('       result: ', result);
    expect(result).to.equal(true);
  });

  it("returns true when all items are true", function() {
    newTestArr = [true,true,true,true];
    var result = newTestArr.mySome(function(value) {
      return value;
    });
    console.log('       result: ', result);
    expect(result).to.equal(true);
  });

  it("returns false when all items are false", function() {
    newTestArr = [false, false, false, false];
    var result = newTestArr.mySome(function(value) {
      return  value;
    });
    console.log('       result: ', result);
    expect(result).to.equal(false);
  });

  it("passes the entire array to the callback as argument 3", function testArrayPassing() {
    var resultingArray = [];
    testArr.mySome(function(_value, index, arr) {
      console.log('       results: ', arr);
      // each time the callback is called verify that the array is as expected
      // Note: until the callback is called though, this test will still pass
      expect(arr).to.have.members([true, false, true, false]);
    });
  });




});
